{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\logo\\\\app\\\\src\\\\component\\\\logo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport \"../component/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Logo = () => {\n  _s();\n  const texts = [{\n    part1: 'Code ',\n    part2: 'life'\n  }, {\n    part1: 'life ',\n    part2: 'Code'\n  }]; // Массив текстов для отображения\n  const [displayedText, setDisplayedText] = useState({\n    part1: '',\n    part2: ''\n  });\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n  const [writingIndex, setWritingIndex] = useState(0); // Индекс для написания текста\n  const [isWriting, setIsWriting] = useState(true); // Состояние для отслеживания, пишем ли мы текст\n  const [isUnderlined, setIsUnderlined] = useState(false); // Состояние для подчеркивания текста\n  const [isGlowing, setIsGlowing] = useState(false); // Состояние для свечения текста\n\n  useEffect(() => {\n    const fullText = texts[currentTextIndex]; // Текущий текст для отображения\n\n    const interval = setInterval(() => {\n      if (isWriting) {\n        if (writingIndex < fullText.part1.length + fullText.part2.length) {\n          if (writingIndex < fullText.part1.length) {\n            setDisplayedText(prev => ({\n              ...prev,\n              part1: fullText.part1.slice(0, writingIndex + 1),\n              part2: prev.part2\n            })); // Обновление отображаемого текста для первой части\n          } else {\n            const part2Index = writingIndex - fullText.part1.length;\n            setDisplayedText({\n              part1: fullText.part1,\n              part2: fullText.part2.slice(0, part2Index + 1)\n            }); // Обновление отображаемого текста для второй части\n          }\n          setWritingIndex(prev => prev + 1); // Увеличиваем индекс написания\n        } else {\n          setTimeout(() => {\n            setIsGlowing(true); // Начинаем свечение\n          }, 500); // Задержка в 1 секунду перед началом стирания\n\n          setTimeout(() => {\n            setIsGlowing(false); // Начинаем свечение\n          }, 600); // Задержка в 1 секунду перед началом стирания\n\n          setTimeout(() => {\n            setIsGlowing(false); // Начинаем свечение\n            setIsUnderlined(true); // Подчеркиваем текст после завершения написания\n            setIsWriting(false); // Начинаем стирать текст\n          }, 1100); // Задержка в 1 секунду перед началом стирания\n        }\n      } else {\n        if (writingIndex > 0) {\n          if (writingIndex > fullText.part1.length) {\n            const part2Index = writingIndex - fullText.part1.length;\n            setDisplayedText(prev => ({\n              part1: prev.part1,\n              part2: fullText.part2.slice(0, part2Index - 1)\n            })); // Стираем текст для второй части\n          } else {\n            setDisplayedText(prev => ({\n              part1: prev.part1.slice(0, writingIndex - 1),\n              part2: prev.part2\n            })); // Стираем текст для первой части\n          }\n          setWritingIndex(prev => prev - 1); // Уменьшаем индекс написания\n        } else {\n          // Переход к следующему тексту\n          setIsUnderlined(false); // Убираем подчеркивание\n          setCurrentTextIndex(prev => (prev + 1) % texts.length); // Переход к следующему тексту\n          setIsWriting(true); // Начинаем писать новый текст\n          setWritingIndex(0); // Сбрасываем индекс для нового текста\n        }\n      }\n    }, isWriting ? 400 : 200); // Задержка в 400 мс при написании и 200 мс при стирании\n\n    return () => clearInterval(interval); // Очистка интервала при размонтировании\n  }, [isWriting, currentTextIndex, writingIndex]); // Зависимости для эффекта\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerLogo\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        backgroundColor: isUnderlined ? 'underline' : 'none ',\n        backgroundColor: isUnderlined ? '#492525' : '#121214'\n      },\n      children: [isGlowing ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `roboto-thin glow`,\n        children: displayedText.part1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"roboto-thin\",\n        children: displayedText.part1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: displayedText.part2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), isWriting && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"cursor\",\n        children: \"|\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 31\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(Logo, \"fzRpX1QJoMYDB4rt8YHgFn+68Rw=\");\n_c = Logo;\nexport default Logo;\nvar _c;\n$RefreshReg$(_c, \"Logo\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Logo","_s","texts","part1","part2","displayedText","setDisplayedText","currentTextIndex","setCurrentTextIndex","writingIndex","setWritingIndex","isWriting","setIsWriting","isUnderlined","setIsUnderlined","isGlowing","setIsGlowing","fullText","interval","setInterval","length","prev","slice","part2Index","setTimeout","clearInterval","className","children","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/logo/app/src/component/logo.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport \"../component/index.css\";\r\n\r\nconst Logo = () => {\r\n    const texts = [\r\n        { part1: 'Code ', part2: 'life' },\r\n        { part1: 'life ', part2: 'Code' }\r\n    ]; // Массив текстов для отображения\r\n    const [displayedText, setDisplayedText] = useState({ part1: '', part2: '' });\r\n    const [currentTextIndex, setCurrentTextIndex] = useState(0);\r\n    const [writingIndex, setWritingIndex] = useState(0); // Индекс для написания текста\r\n    const [isWriting, setIsWriting] = useState(true); // Состояние для отслеживания, пишем ли мы текст\r\n    const [isUnderlined, setIsUnderlined] = useState(false); // Состояние для подчеркивания текста\r\n    const [isGlowing, setIsGlowing] = useState(false); // Состояние для свечения текста\r\n\r\n    useEffect(() => {\r\n        const fullText = texts[currentTextIndex]; // Текущий текст для отображения\r\n\r\n        const interval = setInterval(() => {\r\n            if (isWriting) {\r\n                if (writingIndex < fullText.part1.length + fullText.part2.length) {\r\n                    if (writingIndex < fullText.part1.length) {\r\n                        setDisplayedText((prev) => ({\r\n                            ...prev,\r\n                            part1: fullText.part1.slice(0, writingIndex + 1),\r\n                            part2: prev.part2\r\n                        })); // Обновление отображаемого текста для первой части\r\n                    } else {\r\n                        const part2Index = writingIndex - fullText.part1.length;\r\n                        setDisplayedText({\r\n                            part1: fullText.part1,\r\n                            part2: fullText.part2.slice(0, part2Index + 1)\r\n                        }); // Обновление отображаемого текста для второй части\r\n                    }\r\n                    setWritingIndex((prev) => prev + 1); // Увеличиваем индекс написания\r\n                } else {\r\n\r\n                    setTimeout(() => {\r\n                        setIsGlowing(true); // Начинаем свечение\r\n                        \r\n\r\n                    }, 500); // Задержка в 1 секунду перед началом стирания\r\n\r\n                    setTimeout(() => {\r\n                        setIsGlowing(false); // Начинаем свечение\r\n\r\n                    }, 600); // Задержка в 1 секунду перед началом стирания\r\n\r\n                    setTimeout(() => {\r\n                        setIsGlowing(false); // Начинаем свечение\r\n                        setIsUnderlined(true); // Подчеркиваем текст после завершения написания\r\n                        setIsWriting(false); // Начинаем стирать текст\r\n                    }, 1100); // Задержка в 1 секунду перед началом стирания\r\n                }\r\n            } else {\r\n                if (writingIndex > 0) {\r\n                    if (writingIndex > fullText.part1.length) {\r\n                        const part2Index = writingIndex - fullText.part1.length;\r\n                        setDisplayedText((prev) => ({\r\n                            part1: prev.part1,\r\n                            part2: fullText.part2.slice(0, part2Index - 1)\r\n                        })); // Стираем текст для второй части\r\n                    } else {\r\n                        setDisplayedText((prev) => ({\r\n                            part1: prev.part1.slice(0, writingIndex - 1),\r\n                            part2: prev.part2\r\n                        })); // Стираем текст для первой части\r\n                    }\r\n                    setWritingIndex((prev) => prev - 1); // Уменьшаем индекс написания\r\n                } else {\r\n                    // Переход к следующему тексту\r\n                    setIsUnderlined(false); // Убираем подчеркивание\r\n                    setCurrentTextIndex((prev) => (prev + 1) % texts.length); // Переход к следующему тексту\r\n                    setIsWriting(true); // Начинаем писать новый текст\r\n                    setWritingIndex(0); // Сбрасываем индекс для нового текста\r\n                }\r\n            }\r\n        }, isWriting ? 400 : 200); // Задержка в 400 мс при написании и 200 мс при стирании\r\n\r\n        return () => clearInterval(interval); // Очистка интервала при размонтировании\r\n    }, [isWriting, currentTextIndex, writingIndex]); // Зависимости для эффекта\r\n\r\n    return (\r\n        <div className=\"containerLogo\">\r\n            <h1 style={{ backgroundColor: isUnderlined ? 'underline' : 'none ', backgroundColor: isUnderlined ? '#492525' : '#121214' }}>\r\n                {isGlowing ? (\r\n                    <span className={`roboto-thin glow`}>{displayedText.part1}</span>\r\n                ) : (\r\n                    <span className=\"roboto-thin\">{displayedText.part1}</span>\r\n                )}\r\n                <span>{displayedText.part2}</span>\r\n                {isWriting && <span className=\"cursor\">|</span>} {/* Курсор */}\r\n            </h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}