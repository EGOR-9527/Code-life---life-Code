{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\logo\\\\app\\\\src\\\\component\\\\logo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport \"../component/index.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Logo = () => {\n  _s();\n  const texts = [{\n    part1: 'Code ',\n    part2: 'life'\n  }, {\n    part1: 'life ',\n    part2: 'Code'\n  }]; // Массив текстов для отображения\n  const [displayedText, setDisplayedText] = useState('');\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n  const [writingIndex, setWritingIndex] = useState(0); // Индекс для написания текста\n  const [isWriting, setIsWriting] = useState(true); // Состояние для отслеживания, пишем ли мы текст\n  const [isUnderlined, setIsUnderlined] = useState(false); // Состояние для подчеркивания текста\n  const [isBlinking, setIsBlinking] = useState(false); // Состояние для мигания текста\n\n  useEffect(() => {\n    const fullText = texts[currentTextIndex]; // Текущий текст для отображения\n\n    const interval = setInterval(() => {\n      if (isWriting) {\n        if (writingIndex < fullText.part1.length + fullText.part2.length) {\n          if (writingIndex < fullText.part1.length) {\n            setDisplayedText(/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"roboto-thin\",\n              children: fullText.part1.slice(0, writingIndex + 1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 29\n            }, this)); // Обновление отображаемого текста для первой части\n          } else {\n            const part2Index = writingIndex - fullText.part1.length;\n            setDisplayedText(/*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"roboto-thin\",\n                children: fullText.part1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: fullText.part2.slice(0, part2Index + 1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true)); // Обновление отображаемого текста для второй части\n          }\n          setWritingIndex(prev => prev + 1); // Увеличиваем индекс написания\n        } else {\n          setIsUnderlined(true); // Подчеркиваем текст после завершения написания\n          setIsBlinking(true); // Начинаем мигание\n          setTimeout(() => {\n            setIsBlinking(false); // Останавливаем мигание\n            setIsWriting(false); // Начинаем стирать текст\n          }, 1000); // Задержка в 1 секунду перед началом стирания\n        }\n      } else {\n        if (writingIndex > 0) {\n          if (writingIndex > fullText.part1.length) {\n            const part2Index = writingIndex - fullText.part1.length;\n            setDisplayedText(/*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"roboto-thin\",\n                children: fullText.part1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: fullText.part2.slice(0, part2Index - 1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true)); // Стираем текст для второй части\n          } else {\n            setDisplayedText(/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"roboto-thin\",\n              children: fullText.part1.slice(0, writingIndex - 1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)); // Стираем текст для первой части\n          }\n          setWritingIndex(prev => prev - 1); // Уменьшаем индекс написания\n        } else {\n          // Переход к следующему тексту\n          setIsUnderlined(false); // Убираем подчеркивание\n          setCurrentTextIndex(prev => (prev + 1) % texts.length); // Переход к следующему тексту\n          setIsWriting(true); // Начинаем писать новый текст\n          setWritingIndex(0); // Сбрасываем индекс для нового текста\n        }\n      }\n    }, isWriting ? 400 : 200); // Задержка в 400 мс при написании и 200 мс при стирании\n\n    return () => clearInterval(interval); // Очистка интервала при размонтировании\n  }, [isWriting, currentTextIndex, writingIndex]); // Зависимости для эффекта\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerLogo\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textDecoration: isUnderlined ? 'underline' : 'none',\n        backgroundColor: isUnderlined ? '#492525' : '#121214'\n      },\n      children: [isBlinking ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"roboto-thin blink\",\n        children: displayedText.split(' ')[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"roboto-thin\",\n        children: displayedText.split(' ')[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: displayedText.split(' ').slice(1).join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), isWriting && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"cursor\",\n        children: \"|\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 31\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(Logo, \"aInpH1yEQxPEfuCm9A2h76QovVY=\");\n_c = Logo;\nexport default Logo;\nvar _c;\n$RefreshReg$(_c, \"Logo\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Logo","_s","texts","part1","part2","displayedText","setDisplayedText","currentTextIndex","setCurrentTextIndex","writingIndex","setWritingIndex","isWriting","setIsWriting","isUnderlined","setIsUnderlined","isBlinking","setIsBlinking","fullText","interval","setInterval","length","className","children","slice","fileName","_jsxFileName","lineNumber","columnNumber","part2Index","prev","setTimeout","clearInterval","style","textDecoration","backgroundColor","split","join","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/logo/app/src/component/logo.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport \"../component/index.css\";\r\n\r\nconst Logo = () => {\r\n    const texts = [\r\n        { part1: 'Code ', part2: 'life' },\r\n        { part1: 'life ', part2: 'Code' }\r\n    ]; // Массив текстов для отображения\r\n    const [displayedText, setDisplayedText] = useState('');\r\n    const [currentTextIndex, setCurrentTextIndex] = useState(0);\r\n    const [writingIndex, setWritingIndex] = useState(0); // Индекс для написания текста\r\n    const [isWriting, setIsWriting] = useState(true); // Состояние для отслеживания, пишем ли мы текст\r\n    const [isUnderlined, setIsUnderlined] = useState(false); // Состояние для подчеркивания текста\r\n    const [isBlinking, setIsBlinking] = useState(false); // Состояние для мигания текста\r\n\r\n    useEffect(() => {\r\n        const fullText = texts[currentTextIndex]; // Текущий текст для отображения\r\n\r\n        const interval = setInterval(() => {\r\n            if (isWriting) {\r\n                if (writingIndex < fullText.part1.length + fullText.part2.length) {\r\n                    if (writingIndex < fullText.part1.length) {\r\n                        setDisplayedText(\r\n                            <span className=\"roboto-thin\">{fullText.part1.slice(0, writingIndex + 1)}</span>\r\n                        ); // Обновление отображаемого текста для первой части\r\n                    } else {\r\n                        const part2Index = writingIndex - fullText.part1.length;\r\n                        setDisplayedText(\r\n                            <>\r\n                                <span className=\"roboto-thin\">{fullText.part1}</span>\r\n                                <span>{fullText.part2.slice(0, part2Index + 1)}</span>\r\n                            </>\r\n                        ); // Обновление отображаемого текста для второй части\r\n                    }\r\n                    setWritingIndex((prev) => prev + 1); // Увеличиваем индекс написания\r\n                } else {\r\n                    setIsUnderlined(true); // Подчеркиваем текст после завершения написания\r\n                    setIsBlinking(true); // Начинаем мигание\r\n                    setTimeout(() => {\r\n                        setIsBlinking(false); // Останавливаем мигание\r\n                        setIsWriting(false); // Начинаем стирать текст\r\n                    }, 1000); // Задержка в 1 секунду перед началом стирания\r\n                }\r\n            } else {\r\n                if (writingIndex > 0) {\r\n                    if (writingIndex > fullText.part1.length) {\r\n                        const part2Index = writingIndex - fullText.part1.length;\r\n                        setDisplayedText(\r\n                            <>\r\n                                <span className=\"roboto-thin\">{fullText.part1}</span>\r\n                                <span>{fullText.part2.slice(0, part2Index - 1)}</span>\r\n                            </>\r\n                        ); // Стираем текст для второй части\r\n                    } else {\r\n                        setDisplayedText(\r\n                            <span className=\"roboto-thin\">{fullText.part1.slice(0, writingIndex - 1)}</span>\r\n                        ); // Стираем текст для первой части\r\n                    }\r\n                    setWritingIndex((prev) => prev - 1); // Уменьшаем индекс написания\r\n                } else {\r\n                    // Переход к следующему тексту\r\n                    setIsUnderlined(false); // Убираем подчеркивание\r\n                    setCurrentTextIndex((prev) => (prev + 1) % texts.length); // Переход к следующему тексту\r\n                    setIsWriting(true); // Начинаем писать новый текст\r\n                    setWritingIndex(0); // Сбрасываем индекс для нового текста\r\n                }\r\n            }\r\n        }, isWriting ? 400 : 200); // Задержка в 400 мс при написании и 200 мс при стирании\r\n\r\n        return () => clearInterval(interval); // Очистка интервала при размонтировании\r\n    }, [isWriting, currentTextIndex, writingIndex]); // Зависимости для эффекта\r\n\r\n    return (\r\n        <div className=\"containerLogo\">\r\n            <h1 style={{ textDecoration: isUnderlined ? 'underline' : 'none', backgroundColor: isUnderlined ? '#492525' : '#121214' }}>\r\n                {isBlinking ? (\r\n                    <span className=\"roboto-thin blink\">{displayedText.split(' ')[0]}</span>\r\n                ) : (\r\n                    <span className=\"roboto-thin\">{displayedText.split(' ')[0]}</span>\r\n                )}\r\n                <span>{displayedText.split(' ').slice(1).join(' ')}</span>\r\n                {isWriting && <span className=\"cursor\">|</span>} {/* Курсор */}\r\n            </h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}