{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\logo\\\\app\\\\src\\\\component\\\\logo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../component/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Logo = () => {\n  _s();\n  const texts = [\"Code life\", \"life Code\"]; // Массив текстов для отображения\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n  const [isWriting, setIsWriting] = useState(true); // Состояние для отслеживания, пишем ли мы текст\n  const [isUnderlined, setIsUnderlined] = useState(false); // Состояние для подчеркивания текста\n\n  useEffect(() => {\n    let index = 0; // Индекс для текущего текста\n\n    const fullText = texts[currentTextIndex]; // Текущий текст для отображения\n\n    const interval = setInterval(() => {\n      if (isWriting) {\n        if (index < fullText.length) {\n          setDisplayedText(fullText.slice(0, index + 1)); // Обновление отображаемого текста\n          index++;\n          if (index === fullText.length) {\n            setIsUnderlined(true); // Подчеркиваем текст после завершения написания\n            setTimeout(() => {\n              setIsWriting(false); // Начинаем стирать текст\n              index = fullText.length; // Устанавливаем индекс на конец текста\n            }, 1000); // Задержка в 1 секунду перед началом стирания\n          }\n        }\n      } else {\n        if (index > 0) {\n          setDisplayedText(fullText.slice(0, index - 1)); // Стираем текст\n          index--;\n        } else {\n          // Переход к следующему тексту\n          setIsUnderlined(false); // Убираем подчеркивание\n          setCurrentTextIndex(prev => (prev + 1) % texts.length); // Переход к следующему тексту\n          setIsWriting(true); // Начинаем писать новый текст\n          clearInterval(interval);\n        }\n      }\n    }, isWriting ? 400 : 200); // Задержка в 400 мс при написании и 200 мс при стирании\n\n    return () => clearInterval(interval); // Очистка интервала при размонтировании\n  }, [isWriting, currentTextIndex]); // Зависимости для эффекта\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerLogo\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        backgroundColor: isUnderlined ? \"underline\" : \"none\",\n        backgroundColor: isUnderlined ? \"red\" : \"#121214\"\n      },\n      children: [displayedText, isWriting && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"cursor\",\n        children: \"|\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 23\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Logo, \"G2oLff98Glf+WJkqowpkXxcYcFU=\");\n_c = Logo;\nexport default Logo;\nvar _c;\n$RefreshReg$(_c, \"Logo\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Logo","_s","texts","displayedText","setDisplayedText","currentTextIndex","setCurrentTextIndex","isWriting","setIsWriting","isUnderlined","setIsUnderlined","index","fullText","interval","setInterval","length","slice","setTimeout","prev","clearInterval","className","children","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/logo/app/src/component/logo.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../component/index.css\";\r\n\r\nconst Logo = () => {\r\n  const texts = [\"Code life\", \"life Code\"]; // Массив текстов для отображения\r\n  const [displayedText, setDisplayedText] = useState(\"\");\r\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\r\n  const [isWriting, setIsWriting] = useState(true); // Состояние для отслеживания, пишем ли мы текст\r\n  const [isUnderlined, setIsUnderlined] = useState(false); // Состояние для подчеркивания текста\r\n\r\n  useEffect(() => {\r\n    let index = 0; // Индекс для текущего текста\r\n\r\n    const fullText = texts[currentTextIndex]; // Текущий текст для отображения\r\n\r\n    const interval = setInterval(\r\n      () => {\r\n        if (isWriting) {\r\n          if (index < fullText.length) {\r\n            setDisplayedText(fullText.slice(0, index + 1)); // Обновление отображаемого текста\r\n            index++;\r\n            if (index === fullText.length) {\r\n              setIsUnderlined(true); // Подчеркиваем текст после завершения написания\r\n              setTimeout(() => {\r\n                setIsWriting(false); // Начинаем стирать текст\r\n                index = fullText.length; // Устанавливаем индекс на конец текста\r\n              }, 1000); // Задержка в 1 секунду перед началом стирания\r\n            }\r\n          }\r\n        } else {\r\n          if (index > 0) {\r\n            setDisplayedText(fullText.slice(0, index - 1)); // Стираем текст\r\n            index--;\r\n          } else {\r\n            // Переход к следующему тексту\r\n            setIsUnderlined(false); // Убираем подчеркивание\r\n            setCurrentTextIndex((prev) => (prev + 1) % texts.length); // Переход к следующему тексту\r\n            setIsWriting(true); // Начинаем писать новый текст\r\n            clearInterval(interval);\r\n          }\r\n        }\r\n      },\r\n      isWriting ? 400 : 200\r\n    ); // Задержка в 400 мс при написании и 200 мс при стирании\r\n\r\n    return () => clearInterval(interval); // Очистка интервала при размонтировании\r\n  }, [isWriting, currentTextIndex]); // Зависимости для эффекта\r\n\r\n  return (\r\n    <div className=\"containerLogo\">\r\n      <h1\r\n        style={{\r\n          backgroundColor: isUnderlined ? \"underline\" : \"none\",\r\n          backgroundColor: isUnderlined ? \"red\" : \"#121214\",\r\n        }}\r\n      >\r\n        {displayedText}\r\n        {isWriting && <span className=\"cursor\">|</span>} {/* Курсор */}\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}