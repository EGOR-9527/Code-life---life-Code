{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\logo\\\\app\\\\src\\\\component\\\\logo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../component/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Logo = () => {\n  _s();\n  const texts = [{\n    part1: \"Code \",\n    part2: \"life\"\n  }, {\n    part1: \"life \",\n    part2: \"Code\"\n  }]; // Массив текстов для отображения\n\n  const [displayedText, setDisplayedText] = useState({\n    part1: \"\",\n    part2: \"\"\n  });\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n  const [writingIndex, setWritingIndex] = useState(0); // Индекс для написания текста\n  const [isWriting, setIsWriting] = useState(true); // Состояние для отслеживания, пишем ли мы текст\n  const [isUnderlined, setIsUnderlined] = useState(false); // Состояние для подчеркивания текста\n  const [isGlowing, setIsGlowing] = useState(false); // Состояние для свечения текста\n  const [isFuse, setIsFuse] = useState(true);\n  useEffect(() => {\n    const fullText = texts[currentTextIndex]; // Текущий текст для отображения\n\n    const interval = setInterval(() => {\n      if (isWriting) {\n        if (writingIndex < fullText.part1.length + fullText.part2.length) {\n          if (writingIndex < fullText.part1.length) {\n            setDisplayedText(prev => ({\n              ...prev,\n              part1: fullText.part1.slice(0, writingIndex + 1),\n              part2: prev.part2\n            })); // Обновление отображаемого текста для первой части\n          } else {\n            const part2Index = writingIndex - fullText.part1.length;\n            setDisplayedText({\n              part1: fullText.part1,\n              part2: fullText.part2.slice(0, part2Index + 1)\n            }); // Обновление отображаемого текста для второй части\n          }\n          setWritingIndex(prev => prev + 1); // Увеличиваем индекс написания\n        } else {\n          // Начинаем свечение и мигание текста\n          setIsGlowing(true); // Начинаем свечение\n\n          // Задержка для мигания текста\n          const blinkDuration = 800; // Время мигания в миллисекундах\n          const blinkCount = 4; // Количество миганий\n\n          for (let i = 0; i < blinkCount; i++) {\n            setTimeout(() => {\n              setIsGlowing(prev => !prev); // Переключаем свечение\n            }, i * blinkDuration); // Задержка для мигания\n          }\n\n          // После завершения мигания, начинаем стирать текст\n          setTimeout(() => {\n            setIsGlowing(false); // Отключаем свечение\n            setIsUnderlined(true); // Подчеркиваем текст после завершения написания\n            setIsWriting(false); // Начинаем стирать текст\n          }, blinkCount * blinkDuration); // Задержка перед началом стирания\n        }\n      } else {\n        if (writingIndex > 0) {\n          if (writingIndex > fullText.part1.length) {\n            const part2Index = writingIndex - fullText.part1.length;\n            setDisplayedText(prev => ({\n              part1: prev.part1,\n              part2: fullText.part2.slice(0, part2Index - 1)\n            })); // Стираем текст для второй части\n          } else {\n            setDisplayedText(prev => ({\n              part1: prev.part1.slice(0, writingIndex - 1),\n              part2: prev.part2\n            })); // Стираем текст для первой части\n          }\n          setWritingIndex(prev => prev - 1); // Уменьшаем индекс написания\n        } else {\n          // Переход к следующему тексту\n          setIsUnderlined(false); // Убираем подчеркивание\n          setCurrentTextIndex(prev => (prev + 1) % texts.length); // Переход к следующему тексту\n          setIsWriting(true); // Начинаем писать новый текст\n          setWritingIndex(0); // Сбрасываем индекс для нового текста\n        }\n      }\n    }, isWriting ? 400 : 200); // Задержка в 400 м с при написании и 200 мс при стирании\n\n    return () => clearInterval(interval); // Очистка интервала при размонтировании\n  }, [isWriting, currentTextIndex, writingIndex]); // Зависимости для эффекта\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerLogo\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: isUnderlined ? \"underline\" : \"none \",\n        backgroundColor: isUnderlined ? \"#492525\" : \"#121214\"\n      },\n      className: \"block\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [isGlowing ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `roboto-thin glow`,\n          children: displayedText.part1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"roboto-thin\",\n          children: displayedText.part1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: displayedText.part2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"cursor\",\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 12\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(Logo, \"lSlB5NCa11ivkcLWGDgzNiW9eIU=\");\n_c = Logo;\nexport default Logo;\nvar _c;\n$RefreshReg$(_c, \"Logo\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Logo","_s","texts","part1","part2","displayedText","setDisplayedText","currentTextIndex","setCurrentTextIndex","writingIndex","setWritingIndex","isWriting","setIsWriting","isUnderlined","setIsUnderlined","isGlowing","setIsGlowing","isFuse","setIsFuse","fullText","interval","setInterval","length","prev","slice","part2Index","blinkDuration","blinkCount","i","setTimeout","clearInterval","className","children","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/logo/app/src/component/logo.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../component/index.css\";\r\n\r\nconst Logo = () => {\r\n  const texts = [\r\n    { part1: \"Code \", part2: \"life\" },\r\n    { part1: \"life \", part2: \"Code\" },\r\n  ]; // Массив текстов для отображения\r\n\r\n  const [displayedText, setDisplayedText] = useState({ part1: \"\", part2: \"\" });\r\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\r\n  const [writingIndex, setWritingIndex] = useState(0); // Индекс для написания текста\r\n  const [isWriting, setIsWriting] = useState(true); // Состояние для отслеживания, пишем ли мы текст\r\n  const [isUnderlined, setIsUnderlined] = useState(false); // Состояние для подчеркивания текста\r\n  const [isGlowing, setIsGlowing] = useState(false); // Состояние для свечения текста\r\n  const [isFuse, setIsFuse] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fullText = texts[currentTextIndex]; // Текущий текст для отображения\r\n\r\n    const interval = setInterval(() => {\r\n      if (isWriting) {\r\n        if (writingIndex < fullText.part1.length + fullText.part2.length) {\r\n          if (writingIndex < fullText.part1.length) {\r\n            setDisplayedText((prev) => ({\r\n              ...prev,\r\n              part1: fullText.part1.slice(0, writingIndex + 1),\r\n              part2: prev.part2,\r\n            })); // Обновление отображаемого текста для первой части\r\n          } else {\r\n            const part2Index = writingIndex - fullText.part1.length;\r\n            setDisplayedText({\r\n              part1: fullText.part1,\r\n              part2: fullText.part2.slice(0, part2Index + 1),\r\n            }); // Обновление отображаемого текста для второй части\r\n          }\r\n          setWritingIndex((prev) => prev + 1); // Увеличиваем индекс написания\r\n        } else {\r\n          // Начинаем свечение и мигание текста\r\n          setIsGlowing(true); // Начинаем свечение\r\n\r\n          // Задержка для мигания текста\r\n          const blinkDuration = 800; // Время мигания в миллисекундах\r\n          const blinkCount = 4; // Количество миганий\r\n\r\n          for (let i = 0; i < blinkCount; i++) {\r\n            setTimeout(() => {\r\n              setIsGlowing((prev) => !prev); // Переключаем свечение\r\n            }, i * blinkDuration); // Задержка для мигания\r\n          }\r\n\r\n          // После завершения мигания, начинаем стирать текст\r\n          setTimeout(() => {\r\n            setIsGlowing(false); // Отключаем свечение\r\n            setIsUnderlined(true); // Подчеркиваем текст после завершения написания\r\n            setIsWriting(false); // Начинаем стирать текст\r\n          }, blinkCount * blinkDuration); // Задержка перед началом стирания\r\n        }\r\n      } else {\r\n        if (writingIndex > 0) {\r\n          if (writingIndex > fullText.part1.length) {\r\n            const part2Index = writingIndex - fullText.part1.length;\r\n            setDisplayedText((prev) => ({\r\n              part1: prev.part1,\r\n              part2: fullText.part2.slice(0, part2Index - 1),\r\n            })); // Стираем текст для второй части\r\n          } else {\r\n            setDisplayedText((prev) => ({\r\n              part1: prev.part1.slice(0, writingIndex - 1),\r\n              part2: prev.part2,\r\n            })); // Стираем текст для первой части\r\n          }\r\n          setWritingIndex((prev) => prev - 1); // Уменьшаем индекс написания\r\n        } else {\r\n          // Переход к следующему тексту\r\n          setIsUnderlined(false); // Убираем подчеркивание\r\n          setCurrentTextIndex((prev) => (prev + 1) % texts.length); // Переход к следующему тексту\r\n          setIsWriting(true); // Начинаем писать новый текст\r\n          setWritingIndex(0); // Сбрасываем индекс для нового текста\r\n        }\r\n      }\r\n    }, isWriting ? 400 : 200); // Задержка в 400 м с при написании и 200 мс при стирании\r\n\r\n    return () => clearInterval(interval); // Очистка интервала при размонтировании\r\n  }, [isWriting, currentTextIndex, writingIndex]); // Зависимости для эффекта\r\n\r\n  return (\r\n    <div className=\"containerLogo\">\r\n      <div\r\n        style={{\r\n          backgroundColor: isUnderlined ? \"underline\" : \"none \",\r\n          backgroundColor: isUnderlined ? \"#492525\" : \"#121214\",\r\n        }}\r\n        className=\"block\"\r\n      >\r\n        <h1>\r\n          {isGlowing ? (\r\n            <span className={`roboto-thin glow`}>{displayedText.part1}</span>\r\n          ) : (\r\n            <span className=\"roboto-thin\">{displayedText.part1}</span>\r\n          )}\r\n          <span>{displayedText.part2}</span>\r\n          {<span className=\"cursor\">|</span>} {/* Курсор */}\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}