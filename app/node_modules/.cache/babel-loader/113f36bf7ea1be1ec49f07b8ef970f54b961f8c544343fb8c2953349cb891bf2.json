{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\logo\\\\app\\\\src\\\\component\\\\logo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport \"../component/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Logo = () => {\n  _s();\n  const [displayedText, setDisplayedText] = useState('');\n  const [isWriting, setIsWriting] = useState(true);\n  const [bgColor, setBgColor] = useState('transparent');\n  const texts = ['code', 'life'];\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n  useEffect(() => {\n    let index = 0;\n    const fullText = texts[currentTextIndex];\n    const interval = setInterval(() => {\n      if (isWriting) {\n        if (index < fullText.length) {\n          setDisplayedText(prev => prev + fullText[index]);\n          index++;\n        } else {\n          clearInterval(interval);\n          setBgColor('red'); // Устанавливаем красный фон\n          setIsWriting(false); // Начинаем стирать текст\n        }\n      } else {\n        if (index > 0) {\n          setDisplayedText(prev => prev.slice(0, -1));\n          index--;\n        } else {\n          clearInterval(interval);\n          setBgColor('transparent'); // Сбрасываем фон\n          setIsWriting(true); // Начинаем писать следующий текст\n          setCurrentTextIndex(prev => (prev + 1) % texts.length); // Переход к следующему тексту\n        }\n      }\n    }, 200); // Задержка в 200 мс между символами\n\n    return () => clearInterval(interval); // Очистка интервала при размонтировании\n  }, [isWriting, currentTextIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerLogo\",\n    style: {\n      backgroundColor: bgColor\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [displayedText, isWriting && displayedText.length < texts[currentTextIndex].length && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"cursor\",\n        children: \"|\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 88\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Logo, \"vfYkt43sDML/uAeeLgE34lhBMKY=\");\n_c = Logo;\nexport default Logo;\nvar _c;\n$RefreshReg$(_c, \"Logo\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Logo","_s","displayedText","setDisplayedText","isWriting","setIsWriting","bgColor","setBgColor","texts","currentTextIndex","setCurrentTextIndex","index","fullText","interval","setInterval","length","prev","clearInterval","slice","className","style","backgroundColor","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/logo/app/src/component/logo.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport \"../component/index.css\";\r\n\r\nconst Logo = () => {\r\n    const [displayedText, setDisplayedText] = useState('');\r\n    const [isWriting, setIsWriting] = useState(true);\r\n    const [bgColor, setBgColor] = useState('transparent');\r\n    const texts = ['code', 'life'];\r\n    const [currentTextIndex, setCurrentTextIndex] = useState(0);\r\n    \r\n    useEffect(() => {\r\n        let index = 0;\r\n        const fullText = texts[currentTextIndex];\r\n        \r\n        const interval = setInterval(() => {\r\n            if (isWriting) {\r\n                if (index < fullText.length) {\r\n                    setDisplayedText((prev) => prev + fullText[index]);\r\n                    index++;\r\n                } else {\r\n                    clearInterval(interval);\r\n                    setBgColor('red'); // Устанавливаем красный фон\r\n                    setIsWriting(false); // Начинаем стирать текст\r\n                }\r\n            } else {\r\n                if (index > 0) {\r\n                    setDisplayedText((prev) => prev.slice(0, -1));\r\n                    index--;\r\n                } else {\r\n                    clearInterval(interval);\r\n                    setBgColor('transparent'); // Сбрасываем фон\r\n                    setIsWriting(true); // Начинаем писать следующий текст\r\n                    setCurrentTextIndex((prev) => (prev + 1) % texts.length); // Переход к следующему тексту\r\n                }\r\n            }\r\n        }, 200); // Задержка в 200 мс между символами\r\n\r\n        return () => clearInterval(interval); // Очистка интервала при размонтировании\r\n    }, [isWriting, currentTextIndex]);\r\n\r\n    return (\r\n        <div className=\"containerLogo\" style={{ backgroundColor: bgColor }}>\r\n            <h1>\r\n                {displayedText}\r\n                {isWriting && displayedText.length < texts[currentTextIndex].length && <span className=\"cursor\">|</span>} {/* Курсор */}\r\n            </h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,aAAa,CAAC;EACrD,MAAMW,KAAK,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC;EAC9B,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAE3DD,SAAS,CAAC,MAAM;IACZ,IAAIe,KAAK,GAAG,CAAC;IACb,MAAMC,QAAQ,GAAGJ,KAAK,CAACC,gBAAgB,CAAC;IAExC,MAAMI,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/B,IAAIV,SAAS,EAAE;QACX,IAAIO,KAAK,GAAGC,QAAQ,CAACG,MAAM,EAAE;UACzBZ,gBAAgB,CAAEa,IAAI,IAAKA,IAAI,GAAGJ,QAAQ,CAACD,KAAK,CAAC,CAAC;UAClDA,KAAK,EAAE;QACX,CAAC,MAAM;UACHM,aAAa,CAACJ,QAAQ,CAAC;UACvBN,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;UACnBF,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QACzB;MACJ,CAAC,MAAM;QACH,IAAIM,KAAK,GAAG,CAAC,EAAE;UACXR,gBAAgB,CAAEa,IAAI,IAAKA,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;UAC7CP,KAAK,EAAE;QACX,CAAC,MAAM;UACHM,aAAa,CAACJ,QAAQ,CAAC;UACvBN,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;UAC3BF,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;UACpBK,mBAAmB,CAAEM,IAAI,IAAK,CAACA,IAAI,GAAG,CAAC,IAAIR,KAAK,CAACO,MAAM,CAAC,CAAC,CAAC;QAC9D;MACJ;IACJ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET,OAAO,MAAME,aAAa,CAACJ,QAAQ,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACT,SAAS,EAAEK,gBAAgB,CAAC,CAAC;EAEjC,oBACIV,OAAA;IAAKoB,SAAS,EAAC,eAAe;IAACC,KAAK,EAAE;MAAEC,eAAe,EAAEf;IAAQ,CAAE;IAAAgB,QAAA,eAC/DvB,OAAA;MAAAuB,QAAA,GACKpB,aAAa,EACbE,SAAS,IAAIF,aAAa,CAACa,MAAM,GAAGP,KAAK,CAACC,gBAAgB,CAAC,CAACM,MAAM,iBAAIhB,OAAA;QAAMoB,SAAS,EAAC,QAAQ;QAAAG,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAAC,GAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1G;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACzB,EAAA,CA7CID,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AA+CV,eAAeA,IAAI;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}