{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\logo\\\\app\\\\src\\\\component\\\\logo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport \"../component/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Logo = () => {\n  _s();\n  const texts = ['Code life', 'life Code']; // Массив текстов для отображения\n  const [displayedText, setDisplayedText] = useState('');\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n  const [isWriting, setIsWriting] = useState(true); // Состояние для отслеживания, пишем ли мы текст\n  const [isUnderlined, setIsUnderlined] = useState(false); // Состояние для подчеркивания текста\n\n  useEffect(() => {\n    let index = 0; // Индекс для текущего текста\n    const fullText = texts[currentTextIndex]; // Текущий текст для отображения\n\n    const interval = setInterval(() => {\n      if (isWriting) {\n        if (index < fullText.length) {\n          setDisplayedText(prev => prev + fullText[index]);\n          index++;\n        } else {\n          setIsUnderlined(true); // Подчеркиваем текст после завершения написания\n          setIsWriting(false); // Начинаем стирать текст\n          clearInterval(interval);\n          // Задержка перед началом стирания\n          setTimeout(() => {\n            setIsWriting(false);\n          }, 1000); // Задержка в 1 секунду перед началом стирания\n        }\n      } else {\n        if (index > 0) {\n          setDisplayedText(prev => prev.slice(0, -1));\n          index--;\n        } else {\n          // Переход к следующему тексту\n          setIsUnderlined(false); // Убираем подчеркивание\n          setCurrentTextIndex(prev => (prev + 1) % texts.length); // Переход к следующему тексту\n          setIsWriting(true); // Начинаем писать новый текст\n          clearInterval(interval);\n        }\n      }\n    }, 200); // Задержка в 200 мс между символами\n\n    return () => clearInterval(interval); // Очистка интервала при размонтировании\n  }, [isWriting, currentTextIndex]); // Зависимости для эффекта\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerLogo\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        background: isUnderlined ? 'underline' : 'none',\n        color: isUnderlined ? 'red' : 'black'\n      },\n      children: [displayedText, isWriting && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"cursor\",\n        children: \"|\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 31\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(Logo, \"U2Qy8XUz5m3GVkOZ2cgc4E4LX4w=\");\n_c = Logo;\nexport default Logo;\nvar _c;\n$RefreshReg$(_c, \"Logo\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Logo","_s","texts","displayedText","setDisplayedText","currentTextIndex","setCurrentTextIndex","isWriting","setIsWriting","isUnderlined","setIsUnderlined","index","fullText","interval","setInterval","length","prev","clearInterval","setTimeout","slice","className","children","style","background","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/logo/app/src/component/logo.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport \"../component/index.css\";\r\n\r\nconst Logo = () => {\r\n    const texts = ['Code life', 'life Code']; // Массив текстов для отображения\r\n    const [displayedText, setDisplayedText] = useState('');\r\n    const [currentTextIndex, setCurrentTextIndex] = useState(0);\r\n    const [isWriting, setIsWriting] = useState(true); // Состояние для отслеживания, пишем ли мы текст\r\n    const [isUnderlined, setIsUnderlined] = useState(false); // Состояние для подчеркивания текста\r\n\r\n    useEffect(() => {\r\n        let index = 0; // Индекс для текущего текста\r\n        const fullText = texts[currentTextIndex]; // Текущий текст для отображения\r\n\r\n        const interval = setInterval(() => {\r\n            if (isWriting) {\r\n                if (index < fullText.length) {\r\n                    setDisplayedText((prev) => prev + fullText[index]);\r\n                    index++;\r\n                } else {\r\n                    setIsUnderlined(true); // Подчеркиваем текст после завершения написания\r\n                    setIsWriting(false); // Начинаем стирать текст\r\n                    clearInterval(interval);\r\n                    // Задержка перед началом стирания\r\n                    setTimeout(() => {\r\n                        setIsWriting(false);\r\n                    }, 1000); // Задержка в 1 секунду перед началом стирания\r\n                }\r\n            } else {\r\n                if (index > 0) {\r\n                    setDisplayedText((prev) => prev.slice(0, -1));\r\n                    index--;\r\n                } else {\r\n                    // Переход к следующему тексту\r\n                    setIsUnderlined(false); // Убираем подчеркивание\r\n                    setCurrentTextIndex((prev) => (prev + 1) % texts.length); // Переход к следующему тексту\r\n                    setIsWriting(true); // Начинаем писать новый текст\r\n                    clearInterval(interval);\r\n                }\r\n            }\r\n        }, 200); // Задержка в 200 мс между символами\r\n\r\n        return () => clearInterval(interval); // Очистка интервала при размонтировании\r\n    }, [isWriting, currentTextIndex]); // Зависимости для эффекта\r\n\r\n    return (\r\n        <div className=\"containerLogo\">\r\n            <h1 style={{ background: isUnderlined ? 'underline' : 'none', color: isUnderlined ? 'red' : 'black' }}>\r\n                {displayedText}\r\n                {isWriting && <span className=\"cursor\">|</span>} {/* Курсор */}\r\n            </h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}